import requests
import random
import html
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.spinner import Spinner
from kivy.uix.popup import Popup
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.gridlayout import GridLayout
from kivy.uix.widget import Widget
from kivy.uix.anchorlayout import AnchorLayout
from kivy.clock import Clock
from kivy.metrics import dp

CATEGORIES = {
    "General Knowledge": 9,
    "Entertainment": 11,
    "Science & Nature": 17,
    "Computers": 18,
    "Mathematics": 19,
    "Sports": 21,
    "History": 23
}

DIFFICULTIES = {"Normal": "easy", "Heavy": "medium", "Difficult": "hard"}

class WelcomeScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(10))
        start_button = Button(
            text="Start",
            size_hint=(None, None),
            size=(dp(200), dp(100)),
            pos_hint={"center_x": 0.5}
        )
        start_button.bind(on_press=self.go_to_category)
        layout.add_widget(start_button)
        self.add_widget(layout)
    
    def go_to_category(self, instance):
        self.manager.current = "category"

class CategoryScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(20))
        
        self.category_spinner = Spinner(text="Select Category", values=list(CATEGORIES.keys()))
        layout.add_widget(self.category_spinner)
        
        self.difficulty_spinner = Spinner(text="Select Category", values=list(DIFFICULTIES.keys()))
        layout.add_widget(self.difficulty_spinner)
        
        start_button = Button(text="Start Quiz")
        start_button.bind(on_press=self.start_quiz)
        layout.add_widget(start_button)
        
        self.add_widget(layout)
    
    def start_quiz(self, instance):
        category = self.category_spinner.text
        difficulty = DIFFICULTIES.get(self.difficulty_spinner.text, "easy")
        if category not in CATEGORIES:
            return
        
        self.manager.get_screen("game").fetch_questions(CATEGORIES[category], difficulty)
        self.manager.current = "game"

class GameScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # Main vertical layout
        self.main_layout = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(20))
        
        # 1) Timer label sa itaas
        self.timer_label = Label(
            text="Time Limit: 5",
            size_hint=(1, 0.1),  # maliit na bahagi sa vertical
            font_size=dp(18)
        )
        self.main_layout.add_widget(self.timer_label)
        
        # 2) AnchorLayout sa gitna (para i-center ang question)
        self.center_layout = AnchorLayout(
            anchor_x='center',
            anchor_y='center',
            size_hint=(1, 0.4)  # maaari mong baguhin depende sa gusto mong taas
        )
        
        # Question Label na naka-center
        self.question_label = Label(
            text="Question will appear here",
            font_size=dp(20),
            halign="center",
            valign="middle",
            # Gamit tayo ng width reference para mag-wrap ang text:
            size_hint=(0.8, None),   # 80% ng lapad, auto-height
            text_size=(0, None)      # Ise-set natin sa update_question_label_size
        )
        # Bind para mag-wrap nang tama
        self.question_label.bind(
            texture_size=self.update_question_label_size,
            size=self.update_question_label_size
        )
        self.center_layout.add_widget(self.question_label)
        
        self.main_layout.add_widget(self.center_layout)
        
        # 3) Choices layout sa ibaba
        self.choices_layout = GridLayout(
            cols=1,
            size_hint=(1, 0.5),  # mas malaking bahagi para sa mga choices
            spacing=dp(5)
        )
        self.main_layout.add_widget(self.choices_layout)
        
        # Idagdag ang main_layout sa Screen
        self.add_widget(self.main_layout)
        
        # Quiz data
        self.questions = []
        self.current_question = 0
        self.score = 0
        self.timer_event = None
        self.time_remaining = 5
    
    def update_question_label_size(self, *args):
        """
        Upang mag-wrap ang text, kukunin natin ang actual width
        ng label at iset sa text_size. Pagkatapos, ia-adjust natin
        ang height ayon sa texture_size.
        """
        self.question_label.text_size = (self.question_label.width, None)
        self.question_label.texture_update()
        self.question_label.height = self.question_label.texture_size[1]
    
    def fetch_questions(self, category, difficulty):
        url = f"https://opentdb.com/api.php?amount=20&category={category}&difficulty={difficulty}&type=multiple"
        response = requests.get(url).json()
        if response["response_code"] == 0:
            self.questions = response["results"]
            # Decode HTML entities (para mawala ang &#039; etc.)
            for q in self.questions:
                q["question"] = html.unescape(q["question"])
                q["correct_answer"] = html.unescape(q["correct_answer"])
                q["incorrect_answers"] = [html.unescape(ans) for ans in q["incorrect_answers"]]
        else:
            self.questions = []
        
        self.current_question = 0
        self.score = 0
        self.display_question()
    
    def display_question(self):
        if self.current_question >= len(self.questions):
            self.show_results()
            return
        
        question_data = self.questions[self.current_question]
        
        # Ipakita ang tanong
        self.question_label.text = question_data["question"]
        
        # Ipakita ang mga choices
        self.choices_layout.clear_widgets()
        choices = question_data["incorrect_answers"] + [question_data["correct_answer"]]
        random.shuffle(choices)
        
        for choice in choices:
            btn = Button(
                text=choice,
                size_hint=(1, None),
                height=dp(60),
                font_size=dp(15)
            )
            btn.bind(on_press=lambda x: self.check_answer(x, question_data["correct_answer"]))
            self.choices_layout.add_widget(btn)
        
        # I-reset ang timer
        self.time_remaining = 5
        self.timer_label.text = f"Time Limit: {self.time_remaining}"
        if self.timer_event:
            self.timer_event.cancel()
        self.timer_event = Clock.schedule_interval(self.update_timer, 1)
    
    def update_timer(self, dt):
        self.time_remaining -= 1
        self.timer_label.text = f"Time Limit: {self.time_remaining}"
        if self.time_remaining <= 0:
            self.timer_event.cancel()
            self.show_popup("No Answer", "Correct answer: " + self.questions[self.current_question]["correct_answer"])
            self.current_question += 1
            Clock.schedule_once(lambda dt: self.display_question(), 1.5)
    
    def check_answer(self, instance, correct_answer):
        self.timer_event.cancel()
        if instance.text == correct_answer:
            self.score += 1
            self.show_popup("Correct!", random.choice(["Great job!", "Excellent!", "Awesome!"]))
        else:
            self.show_popup("Wrong!", "Correct answer: " + correct_answer)
        self.current_question += 1
        Clock.schedule_once(lambda dt: self.display_question(), 1.5)
    
    def show_popup(self, title, message):
        """
        Updated na popup na may mas malaking font at centered text.
        """
        popup_layout = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        
        # Mas readable at friendly na font size
        popup_label = Label(
            text=message,
            size_hint=(1, 0.7),
            font_size=dp(16),
            halign="center",
            valign="middle"
        )
        # Para mag-wrap nang tama kung mahaba ang text
        popup_label.bind(
            texture_size=lambda instance, size: setattr(instance, 'text_size', (instance.width, None))
        )
        
        popup_layout.add_widget(popup_label)
        
        # Pwede mo ring taasan ang title_size kung gusto mong mas malaki pa ang 'Correct!' o 'Wrong!'
        popup = Popup(
            title=title,
            title_size=dp(20),   # Laki ng title text
            content=popup_layout,
            size_hint=(0.7, 0.3),
            auto_dismiss=True
        )
        popup.open()
        Clock.schedule_once(lambda dt: popup.dismiss(), 1.5)
    
    def show_results(self):
        message = "Good" if self.score <= 7 else "Very Good" if self.score <= 14 else "Excellent"
        
        self.main_layout.clear_widgets()
        self.main_layout.add_widget(Label(
            text=f"Final Score: {self.score}/20\n{message}",
            size_hint=(1, 0.5),
            halign="center",
            valign="middle"
        ))
        
        button_layout = BoxLayout(
            orientation='horizontal',
            size_hint=(1, 0.2),
            spacing=dp(20),
            padding=[dp(50), 0, dp(50), 0]
        )
        
        home_button = Button(text="Home", size_hint=(1, 1))
        home_button.bind(on_press=self.go_home)
        
        exit_button = Button(text="Exit", size_hint=(1, 1))
        exit_button.bind(on_press=App.get_running_app().stop)
        
        button_layout.add_widget(home_button)
        button_layout.add_widget(exit_button)
        self.main_layout.add_widget(button_layout)
    
    def go_home(self, instance):
        self.manager.current = "welcome"

class TriviaApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(WelcomeScreen(name="welcome"))
        sm.add_widget(CategoryScreen(name="category"))
        sm.add_widget(GameScreen(name="game"))
        return sm

if __name__ == "__main__":
    TriviaApp().run()
